    Copyright (C) Blidzy 2020
    
    This file is part of lbl++ : you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_________________________

--LBL++ Documentation--

LBL++ is an interpreted language, so, the execution of an LBL++ program need a build of the interpreter (Lbl++ source code) 
Run a LBL++ program:
$ [PathOfYourBuild] file.lblpp

An LineByLine++ program have 6 registers: A, B, C, D, E, F and l, l is the number of the next line that will be executed.

DIV[REG1][REG2] -> put the result of the division of [REG1] by [REG2] as the value of [REG1]
MUL[REG1][REG2] -> put the result of the multiplication of [REG1] by [REG2] as the value of [REG1]
ADD[REG1][REG2] -> put the result of the addition of [REG1] by [REG2] as the value of [REG1]
SUB[REG1][REG2] -> put the result of the substraction of [REG1] by [REG2] as the value of [REG1]
MOD[REG1][REG2] -> put the result of the modulo of [REG1] divised by [REG2] as the value of [REG1]
MOV[REG1][REG2] -> put the value of [REG2] as the value of [REG1]
SWP[REG1][REG2] -> put the value of [REG1] as the value of [REG2] and the value of [REG2] as the value of [REG1]
CLS_[REG] -> put the value of [REG] at 0
DII_[REG] -> print the value of [REG] at standard output
DIC_[REG] -> print the ascii charv of the value of [REG] at standard output
REC_[REG] -> read a char at the standard input and put his ascii value as the value of [REG]
INC_[REG] -> add 1 to the value of [REG]
INC_[REG] -> add -1 to the value of [REG]
EQ_[REG1][REG1] -> the next line is execute only if [REG1] is equal to [REG2]
SUP[REG1][REG1] -> the next line is execute only if [REG1] is superior to [REG2]
INF[REG1][REG1] -> the next line is execute only if [REG1] is inferior to [REG2]
SOE[REG1][REG1] -> the next line is execute only if [REG1] is superior or equal to [REG2]
IOE[REG1][REG1] -> the next line is execute only if [REG1] is inferior or equal to [REG2]